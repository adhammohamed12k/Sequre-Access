
Sequre Access.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000334  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080004c8  080004c8  000014c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004d8  080004d8  000014e0  2**0
                  CONTENTS
  4 .ARM          00000000  080004d8  080004d8  000014e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004d8  080004e0  000014e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004d8  080004d8  000014d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004dc  080004dc  000014dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004e0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004e0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000315  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000106  00000000  00000000  00001825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00001930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002d  00000000  00000000  00001978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000fad  00000000  00000000  000019a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005d2  00000000  00000000  00002952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003e64  00000000  00000000  00002f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00006d88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000005c  00000000  00000000  00006dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00006e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004b0 	.word	0x080004b0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080004b0 	.word	0x080004b0

080001d4 <main>:

#include <stdint.h>
#include "stm32xxx.h"
int main(void)
{
 80001d4:	b490      	push	{r4, r7}
 80001d6:	b08c      	sub	sp, #48	@ 0x30
 80001d8:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<0);//A
 80001da:	4b8a      	ldr	r3, [pc, #552]	@ (8000404 <main+0x230>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001de:	4a89      	ldr	r2, [pc, #548]	@ (8000404 <main+0x230>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= (1<<1);//B
 80001e6:	4b87      	ldr	r3, [pc, #540]	@ (8000404 <main+0x230>)
 80001e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001ea:	4a86      	ldr	r2, [pc, #536]	@ (8000404 <main+0x230>)
 80001ec:	f043 0302 	orr.w	r3, r3, #2
 80001f0:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER &=~ (3 << (0 * 2));//FOR BTN 1
 80001f2:	4b85      	ldr	r3, [pc, #532]	@ (8000408 <main+0x234>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a84      	ldr	r2, [pc, #528]	@ (8000408 <main+0x234>)
 80001f8:	f023 0303 	bic.w	r3, r3, #3
 80001fc:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR |= (1 << (0 * 2));//PULL UP
 80001fe:	4b82      	ldr	r3, [pc, #520]	@ (8000408 <main+0x234>)
 8000200:	68db      	ldr	r3, [r3, #12]
 8000202:	4a81      	ldr	r2, [pc, #516]	@ (8000408 <main+0x234>)
 8000204:	f043 0301 	orr.w	r3, r3, #1
 8000208:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER &=~ (3 << (1 * 2));//FOR BTN 2
 800020a:	4b7f      	ldr	r3, [pc, #508]	@ (8000408 <main+0x234>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a7e      	ldr	r2, [pc, #504]	@ (8000408 <main+0x234>)
 8000210:	f023 030c 	bic.w	r3, r3, #12
 8000214:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR |= (1 << (1 * 2));//PULL UP
 8000216:	4b7c      	ldr	r3, [pc, #496]	@ (8000408 <main+0x234>)
 8000218:	68db      	ldr	r3, [r3, #12]
 800021a:	4a7b      	ldr	r2, [pc, #492]	@ (8000408 <main+0x234>)
 800021c:	f043 0304 	orr.w	r3, r3, #4
 8000220:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER &=~ (3 << (2 * 2));//FOR BTN 3
 8000222:	4b79      	ldr	r3, [pc, #484]	@ (8000408 <main+0x234>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a78      	ldr	r2, [pc, #480]	@ (8000408 <main+0x234>)
 8000228:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800022c:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR |= (1 << (2 * 2));//PULL UP
 800022e:	4b76      	ldr	r3, [pc, #472]	@ (8000408 <main+0x234>)
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	4a75      	ldr	r2, [pc, #468]	@ (8000408 <main+0x234>)
 8000234:	f043 0310 	orr.w	r3, r3, #16
 8000238:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER &=~ (3 << (3 * 2));//FOR BTN 4
 800023a:	4b73      	ldr	r3, [pc, #460]	@ (8000408 <main+0x234>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a72      	ldr	r2, [pc, #456]	@ (8000408 <main+0x234>)
 8000240:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000244:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR |= (1 << (3 * 2));//PULL UP
 8000246:	4b70      	ldr	r3, [pc, #448]	@ (8000408 <main+0x234>)
 8000248:	68db      	ldr	r3, [r3, #12]
 800024a:	4a6f      	ldr	r2, [pc, #444]	@ (8000408 <main+0x234>)
 800024c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000250:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER &=~ (3 << (4 * 2));//FOR BTN 5 .. RESET
 8000252:	4b6d      	ldr	r3, [pc, #436]	@ (8000408 <main+0x234>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a6c      	ldr	r2, [pc, #432]	@ (8000408 <main+0x234>)
 8000258:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800025c:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR |= (1 << (4 * 2));//PULL UP
 800025e:	4b6a      	ldr	r3, [pc, #424]	@ (8000408 <main+0x234>)
 8000260:	68db      	ldr	r3, [r3, #12]
 8000262:	4a69      	ldr	r2, [pc, #420]	@ (8000408 <main+0x234>)
 8000264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000268:	60d3      	str	r3, [r2, #12]

	//////////////////////////
	//       OUTPUT's       //

	GPIOB->MODER &=~ (3 << (0 * 2));
 800026a:	4b68      	ldr	r3, [pc, #416]	@ (800040c <main+0x238>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a67      	ldr	r2, [pc, #412]	@ (800040c <main+0x238>)
 8000270:	f023 0303 	bic.w	r3, r3, #3
 8000274:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1 << (0 * 2));
 8000276:	4b65      	ldr	r3, [pc, #404]	@ (800040c <main+0x238>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4a64      	ldr	r2, [pc, #400]	@ (800040c <main+0x238>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &=~ (3 << (1 * 2));
 8000282:	4b62      	ldr	r3, [pc, #392]	@ (800040c <main+0x238>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a61      	ldr	r2, [pc, #388]	@ (800040c <main+0x238>)
 8000288:	f023 030c 	bic.w	r3, r3, #12
 800028c:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1 << (1 * 2));
 800028e:	4b5f      	ldr	r3, [pc, #380]	@ (800040c <main+0x238>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4a5e      	ldr	r2, [pc, #376]	@ (800040c <main+0x238>)
 8000294:	f043 0304 	orr.w	r3, r3, #4
 8000298:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &=~ (3 << (2 * 2));
 800029a:	4b5c      	ldr	r3, [pc, #368]	@ (800040c <main+0x238>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a5b      	ldr	r2, [pc, #364]	@ (800040c <main+0x238>)
 80002a0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80002a4:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1 << (2 * 2));
 80002a6:	4b59      	ldr	r3, [pc, #356]	@ (800040c <main+0x238>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a58      	ldr	r2, [pc, #352]	@ (800040c <main+0x238>)
 80002ac:	f043 0310 	orr.w	r3, r3, #16
 80002b0:	6013      	str	r3, [r2, #0]

	const int CorrectSeq[4] = {1 , 3 , 2 , 4 };
 80002b2:	4b57      	ldr	r3, [pc, #348]	@ (8000410 <main+0x23c>)
 80002b4:	f107 0418 	add.w	r4, r7, #24
 80002b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int EnterSeq[4] = {0};
 80002be:	f107 0308 	add.w	r3, r7, #8
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
	int indexx = 0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

	while(1)
	{
			if(!((GPIOA->IDR >> 0) &1))
 80002d0:	4b4d      	ldr	r3, [pc, #308]	@ (8000408 <main+0x234>)
 80002d2:	691b      	ldr	r3, [r3, #16]
 80002d4:	f003 0301 	and.w	r3, r3, #1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d110      	bne.n	80002fe <main+0x12a>
			{
				EnterSeq[indexx++] = 1;
 80002dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80002de:	1c5a      	adds	r2, r3, #1
 80002e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	3330      	adds	r3, #48	@ 0x30
 80002e6:	443b      	add	r3, r7
 80002e8:	2201      	movs	r2, #1
 80002ea:	f843 2c28 	str.w	r2, [r3, #-40]
				while(!((GPIOA->IDR >> 0) &1));
 80002ee:	bf00      	nop
 80002f0:	4b45      	ldr	r3, [pc, #276]	@ (8000408 <main+0x234>)
 80002f2:	691b      	ldr	r3, [r3, #16]
 80002f4:	f003 0301 	and.w	r3, r3, #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d0f9      	beq.n	80002f0 <main+0x11c>
 80002fc:	e043      	b.n	8000386 <main+0x1b2>
			}
			else if(!((GPIOA->IDR >> 1) &1))
 80002fe:	4b42      	ldr	r3, [pc, #264]	@ (8000408 <main+0x234>)
 8000300:	691b      	ldr	r3, [r3, #16]
 8000302:	f003 0302 	and.w	r3, r3, #2
 8000306:	2b00      	cmp	r3, #0
 8000308:	d110      	bne.n	800032c <main+0x158>
			{
				EnterSeq[indexx++] = 2;
 800030a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800030c:	1c5a      	adds	r2, r3, #1
 800030e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	3330      	adds	r3, #48	@ 0x30
 8000314:	443b      	add	r3, r7
 8000316:	2202      	movs	r2, #2
 8000318:	f843 2c28 	str.w	r2, [r3, #-40]
				while(!((GPIOA->IDR >> 1) &1));
 800031c:	bf00      	nop
 800031e:	4b3a      	ldr	r3, [pc, #232]	@ (8000408 <main+0x234>)
 8000320:	691b      	ldr	r3, [r3, #16]
 8000322:	f003 0302 	and.w	r3, r3, #2
 8000326:	2b00      	cmp	r3, #0
 8000328:	d0f9      	beq.n	800031e <main+0x14a>
 800032a:	e02c      	b.n	8000386 <main+0x1b2>
			}
			else if(!((GPIOA->IDR >> 2) &1))
 800032c:	4b36      	ldr	r3, [pc, #216]	@ (8000408 <main+0x234>)
 800032e:	691b      	ldr	r3, [r3, #16]
 8000330:	f003 0304 	and.w	r3, r3, #4
 8000334:	2b00      	cmp	r3, #0
 8000336:	d110      	bne.n	800035a <main+0x186>
			{
				EnterSeq[indexx++] = 3;
 8000338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800033a:	1c5a      	adds	r2, r3, #1
 800033c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	3330      	adds	r3, #48	@ 0x30
 8000342:	443b      	add	r3, r7
 8000344:	2203      	movs	r2, #3
 8000346:	f843 2c28 	str.w	r2, [r3, #-40]
				while(!((GPIOA->IDR >> 2) &1));
 800034a:	bf00      	nop
 800034c:	4b2e      	ldr	r3, [pc, #184]	@ (8000408 <main+0x234>)
 800034e:	691b      	ldr	r3, [r3, #16]
 8000350:	f003 0304 	and.w	r3, r3, #4
 8000354:	2b00      	cmp	r3, #0
 8000356:	d0f9      	beq.n	800034c <main+0x178>
 8000358:	e015      	b.n	8000386 <main+0x1b2>
			}
			else if(!((GPIOA->IDR >> 3) &1))
 800035a:	4b2b      	ldr	r3, [pc, #172]	@ (8000408 <main+0x234>)
 800035c:	691b      	ldr	r3, [r3, #16]
 800035e:	f003 0308 	and.w	r3, r3, #8
 8000362:	2b00      	cmp	r3, #0
 8000364:	d10f      	bne.n	8000386 <main+0x1b2>
			{
				EnterSeq[indexx++] = 4;
 8000366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000368:	1c5a      	adds	r2, r3, #1
 800036a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	3330      	adds	r3, #48	@ 0x30
 8000370:	443b      	add	r3, r7
 8000372:	2204      	movs	r2, #4
 8000374:	f843 2c28 	str.w	r2, [r3, #-40]
				while(!((GPIOA->IDR >> 3) &1));
 8000378:	bf00      	nop
 800037a:	4b23      	ldr	r3, [pc, #140]	@ (8000408 <main+0x234>)
 800037c:	691b      	ldr	r3, [r3, #16]
 800037e:	f003 0308 	and.w	r3, r3, #8
 8000382:	2b00      	cmp	r3, #0
 8000384:	d0f9      	beq.n	800037a <main+0x1a6>
			}

			if(indexx == 4)
 8000386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000388:	2b04      	cmp	r3, #4
 800038a:	d133      	bne.n	80003f4 <main+0x220>
			{
				int correct = 1;
 800038c:	2301      	movs	r3, #1
 800038e:	62bb      	str	r3, [r7, #40]	@ 0x28
				for(volatile int i = 0 ; i < 4 ; i++)
 8000390:	2300      	movs	r3, #0
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	e013      	b.n	80003be <main+0x1ea>
				{
					if(EnterSeq[i] != CorrectSeq[i])
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	3330      	adds	r3, #48	@ 0x30
 800039c:	443b      	add	r3, r7
 800039e:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	3330      	adds	r3, #48	@ 0x30
 80003a8:	443b      	add	r3, r7
 80003aa:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80003ae:	429a      	cmp	r2, r3
 80003b0:	d002      	beq.n	80003b8 <main+0x1e4>
					{
						correct = 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	62bb      	str	r3, [r7, #40]	@ 0x28
						break;
 80003b6:	e005      	b.n	80003c4 <main+0x1f0>
				for(volatile int i = 0 ; i < 4 ; i++)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3301      	adds	r3, #1
 80003bc:	607b      	str	r3, [r7, #4]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2b03      	cmp	r3, #3
 80003c2:	dde8      	ble.n	8000396 <main+0x1c2>
					}
				}
				if(correct)
 80003c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d006      	beq.n	80003d8 <main+0x204>
				{
					GPIOB->ODR |= (1 << 0 );//green on
 80003ca:	4b10      	ldr	r3, [pc, #64]	@ (800040c <main+0x238>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a0f      	ldr	r2, [pc, #60]	@ (800040c <main+0x238>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	6153      	str	r3, [r2, #20]
 80003d6:	e00b      	b.n	80003f0 <main+0x21c>
				}
				else
				{
					GPIOB->ODR |= (1 << 1);//red on
 80003d8:	4b0c      	ldr	r3, [pc, #48]	@ (800040c <main+0x238>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	4a0b      	ldr	r2, [pc, #44]	@ (800040c <main+0x238>)
 80003de:	f043 0302 	orr.w	r3, r3, #2
 80003e2:	6153      	str	r3, [r2, #20]
					GPIOB->ODR |= (1 << 2);//buzzer on
 80003e4:	4b09      	ldr	r3, [pc, #36]	@ (800040c <main+0x238>)
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	4a08      	ldr	r2, [pc, #32]	@ (800040c <main+0x238>)
 80003ea:	f043 0304 	orr.w	r3, r3, #4
 80003ee:	6153      	str	r3, [r2, #20]
				}
				indexx=0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

			}
		if(!(GPIOA->IDR |= (1 << (4))))
 80003f4:	4b04      	ldr	r3, [pc, #16]	@ (8000408 <main+0x234>)
 80003f6:	691b      	ldr	r3, [r3, #16]
 80003f8:	4a03      	ldr	r2, [pc, #12]	@ (8000408 <main+0x234>)
 80003fa:	f043 0310 	orr.w	r3, r3, #16
 80003fe:	6113      	str	r3, [r2, #16]
			if(!((GPIOA->IDR >> 0) &1))
 8000400:	e766      	b.n	80002d0 <main+0xfc>
 8000402:	bf00      	nop
 8000404:	40023800 	.word	0x40023800
 8000408:	40020000 	.word	0x40020000
 800040c:	40020400 	.word	0x40020400
 8000410:	080004c8 	.word	0x080004c8

08000414 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000414:	480d      	ldr	r0, [pc, #52]	@ (800044c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000416:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000418:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800041c:	480c      	ldr	r0, [pc, #48]	@ (8000450 <LoopForever+0x6>)
  ldr r1, =_edata
 800041e:	490d      	ldr	r1, [pc, #52]	@ (8000454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000420:	4a0d      	ldr	r2, [pc, #52]	@ (8000458 <LoopForever+0xe>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000424:	e002      	b.n	800042c <LoopCopyDataInit>

08000426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042a:	3304      	adds	r3, #4

0800042c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800042c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000430:	d3f9      	bcc.n	8000426 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000432:	4a0a      	ldr	r2, [pc, #40]	@ (800045c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000434:	4c0a      	ldr	r4, [pc, #40]	@ (8000460 <LoopForever+0x16>)
  movs r3, #0
 8000436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000438:	e001      	b.n	800043e <LoopFillZerobss>

0800043a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800043c:	3204      	adds	r2, #4

0800043e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000440:	d3fb      	bcc.n	800043a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000442:	f000 f811 	bl	8000468 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000446:	f7ff fec5 	bl	80001d4 <main>

0800044a <LoopForever>:

LoopForever:
  b LoopForever
 800044a:	e7fe      	b.n	800044a <LoopForever>
  ldr   r0, =_estack
 800044c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000454:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000458:	080004e0 	.word	0x080004e0
  ldr r2, =_sbss
 800045c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000460:	2000001c 	.word	0x2000001c

08000464 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000464:	e7fe      	b.n	8000464 <ADC_IRQHandler>
	...

08000468 <__libc_init_array>:
 8000468:	b570      	push	{r4, r5, r6, lr}
 800046a:	4d0d      	ldr	r5, [pc, #52]	@ (80004a0 <__libc_init_array+0x38>)
 800046c:	4c0d      	ldr	r4, [pc, #52]	@ (80004a4 <__libc_init_array+0x3c>)
 800046e:	1b64      	subs	r4, r4, r5
 8000470:	10a4      	asrs	r4, r4, #2
 8000472:	2600      	movs	r6, #0
 8000474:	42a6      	cmp	r6, r4
 8000476:	d109      	bne.n	800048c <__libc_init_array+0x24>
 8000478:	4d0b      	ldr	r5, [pc, #44]	@ (80004a8 <__libc_init_array+0x40>)
 800047a:	4c0c      	ldr	r4, [pc, #48]	@ (80004ac <__libc_init_array+0x44>)
 800047c:	f000 f818 	bl	80004b0 <_init>
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	10a4      	asrs	r4, r4, #2
 8000484:	2600      	movs	r6, #0
 8000486:	42a6      	cmp	r6, r4
 8000488:	d105      	bne.n	8000496 <__libc_init_array+0x2e>
 800048a:	bd70      	pop	{r4, r5, r6, pc}
 800048c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000490:	4798      	blx	r3
 8000492:	3601      	adds	r6, #1
 8000494:	e7ee      	b.n	8000474 <__libc_init_array+0xc>
 8000496:	f855 3b04 	ldr.w	r3, [r5], #4
 800049a:	4798      	blx	r3
 800049c:	3601      	adds	r6, #1
 800049e:	e7f2      	b.n	8000486 <__libc_init_array+0x1e>
 80004a0:	080004d8 	.word	0x080004d8
 80004a4:	080004d8 	.word	0x080004d8
 80004a8:	080004d8 	.word	0x080004d8
 80004ac:	080004dc 	.word	0x080004dc

080004b0 <_init>:
 80004b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b2:	bf00      	nop
 80004b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b6:	bc08      	pop	{r3}
 80004b8:	469e      	mov	lr, r3
 80004ba:	4770      	bx	lr

080004bc <_fini>:
 80004bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004be:	bf00      	nop
 80004c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c2:	bc08      	pop	{r3}
 80004c4:	469e      	mov	lr, r3
 80004c6:	4770      	bx	lr
